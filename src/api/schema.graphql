# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CategoryFormMutationPayload {
    category: CategoryType
    clientMutationId: String
    errors: [ErrorType]
}

type CategoryType {
    id: ID!
    name: String!
    posts: [PostType!]!
}

type CreatePost {
    errors: GraphqlError
    formData: PostType
    success: Boolean
}

type DeleteJSONWebTokenCookie {
    deleted: Boolean!
}

type ErrorType {
    field: String!
    messages: [String!]!
}

type KeywordFormMutationPayload {
    clientMutationId: String
    errors: [ErrorType]
    keyword: CategoryType
}

type KeywordType {
    id: ID!
    name: String!
    posts: [PostType!]!
}

type Mutation {
    "Create a new Category"
    createCategory(input: CategoryFormMutationInput!): CategoryFormMutationPayload
    "Create a new Keyword"
    createKeyword(input: KeywordFormMutationInput!): KeywordFormMutationPayload
    "Create a new Post for logged in User"
    createPost(post: PostInput!): CreatePost
    "Revoke a JWT Token"
    deleteToken: DeleteJSONWebTokenCookie
    "Obtain Refresh JWT Token"
    refreshToken(token: String): Refresh
    "Obtain new JWT Token"
    tokenAuth(password: String!, username: String!): ObtainJSONWebToken
    "Update Category by Id"
    updateCategory(input: CategoryFormMutationInput!): CategoryFormMutationPayload
    "Update Keyword by Id"
    updateKeyword(input: KeywordFormMutationInput!): KeywordFormMutationPayload
    "Update Users Post by Id"
    updatePost(id: ID!, post: PostInput!): UpdatePost
    "Upload Image for Users Post"
    uploadPostImage(id: ID!, image: Upload!): UploadPostImage
    "Verify a JWT Token"
    verifyToken(token: String): Verify
}

"Obtain JSON Web Token mutation"
type ObtainJSONWebToken {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    token: String!
}

type PostType {
    category: CategoryType!
    dateModified: DateTime!
    datePublished: DateTime!
    id: ID!
    image: String
    keywords: [KeywordType!]!
    name: String!
    text: String
    writtenBy: UserType
}

type Query {
    categoryDetail(id: ID!): CategoryType
    categoryList: [CategoryType]
    hello: String
    keywordDetail(id: ID!): KeywordType
    keywordList: [KeywordType]
    me: UserType
    postDetail(id: ID!): PostType
    postList(categoryId: ID, keywordId: ID): [PostType]
    userDetail(username: String!): UserType
}

type Refresh {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    token: String!
}

type UpdatePost {
    errors: GraphqlError
    formData: PostType
    success: Boolean
}

type UploadPostImage {
    errors: [String]
    success: Boolean
}

type UserType {
    firstName: String!
    id: ID!
    lastName: String!
    posts: [PostType!]!
    "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
    username: String!
}

type Verify {
    payload: GenericScalar!
}

"""

The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""

The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""

Errors messages and codes mapped to
fields or non fields errors.
Example:
{
field_name: [
{
"message": "error message",
"code": "error_code"
}
],
other_field: [
{
"message": "error message",
"code": "error_code"
}
],
nonFieldErrors: [
{
"message": "error message",
"code": "error_code"
}
]
}
"""
scalar GraphqlError

"""

Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

input CategoryFormMutationInput {
    clientMutationId: String
    id: ID
    name: String!
}

input KeywordFormMutationInput {
    clientMutationId: String
    id: ID
    name: String!
}

input PostInput {
    category: ID
    image: String
    keywords: [ID]
    name: String
    text: String
}
